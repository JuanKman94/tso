import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
print('{}: path = {}'.format(__file__, sys.path))

import cflparameters
import cflproblem

"""
Read written RIG result

:param fname: filename of instance generated by RIG
:returns: Capacitated Facility Location Problem instance
:raises IOError: Raise error if something terrible happens when reading file
"""
def read_instance(fname):
    result = dict()
    X, Y = None, None
    clients_demands = list()
    n, m, capacity = 1, 1, 1
    costs_matrix = list()
    facilities_costs = list()
    fhandle = open(fname, 'r')

    # read the instance meta data
    line = fhandle.readline()
    values = line.strip().split()
    m, n, capacity = int(values[0]), int(values[1]), int(values[2])

    # read the facilities costs
    for y in range(m):
        line = fhandle.readline()
        facilities_costs.append( int(line) )

    # read the transportation costs
    for y in range(m):
        fac_costs = list()
        line = fhandle.readline()
        _costs = line.rstrip().split()
        for x in range( len(_costs) ):
            fac_costs.append( int(_costs[x]) )

        costs_matrix.append( fac_costs )

    # read the clients demands
    for i in range(n):
        line = fhandle.readline()
        clients_demands.append( int(line) )

    # attempt to read solution matrix
    _Y = fhandle.readline()

    if _Y != '':
        # recreate them with appropiate length
        Y = numpy.zeros(m, dtype=numpy.int)
        X = numpy.zeros((m, n), dtype=numpy.int)

        _Y = _Y.split()
        for j in range(len(_Y)):
            Y[j] = int(_Y[j])

        # read distributions matrix
        for j in range(m):
            _x = fhandle.readline()
            _x = _x.split()
            for i in range( len(_x) ):
                X[j][i] = _x[i]

    fhandle.close()

    return CFLProblem(
            CFLParameters(
                capacity,
                maintenance,
                clients_demands,
                costs_matrix,
                X,
                Y)
            )
